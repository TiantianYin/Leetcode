//4. Median of Two Sorted Arrays
class Solution {
public:
    double findIndex(vector<int>& nums1, vector<int>& nums2, int ind){
        int size1=nums1.size(),size2=nums2.size();
        int target=ind;
        int index1=0,index2=0;
        if (size1==index1) return nums2[target-index1-1];
        if (size2==index2) return nums1[target-index2-1];
        while(true){
            cout<<index1<<"i1i"<<index2<<"i2i"<<endl;
            cout<<target<<'t'<<endl;
            if (target==2){
                if(nums1[index1]>=nums2[index2]) index2++;
                else index1++;
                target--;
            }
            if (target==1) {
                if (size1==index1) return nums2[index2];
                if (size2==index2) return nums1[index1];
                if(nums1[index1]>=nums2[index2]) return nums2[index2];
                else return nums1[index1];
            };
            int k=(target-1)/2;
            if ((index1+k)<size1 && (index2+k)<size2){
                if (nums1[index1+k]==nums2[index2+k]) return nums1[index1+k];
                if(nums1[index1+k]>nums2[index2+k]) index2=index2+k;
                else index1=index1+k;
                target-=k;
            }
            else{
                if((index1+k)>=size1){
                    if (nums1[size1-1]==nums2[target+index1+index2-size1]) return nums1[size1-1];
                    if(nums1[size1-1]<nums2[target+index1+index2-size1]){
                        if ((target+index1+index2-size1-1)>=0) return max(nums1[size1-1],nums2[target+index1+index2-size1-1]);
                        else return nums1[size1-1];
                    }
                    else {
                        if(size1==1) return nums2[target+index1+index2-size1];
                        else {
                            index2=target+index1+index2-size1;
                            target-=(target+index1-size1);
                        }
                    }
                }
                else{
                    if (nums2[size2-1]==nums1[target+index1+index2-size2]) return nums2[size2-1];
                    if(nums2[size2-1]<nums1[target+index1+index2-size2]){
                        if ((target+index1+index2-size2-1)>=0) return max(nums2[size2-1],nums1[target+index1+index2-size2-1]);
                        else return nums2[size2-1];
                    }
                    else {
                        if(size2==1) return nums1[target+index1+index2-size2];
                        else {
                            index1=target+index1+index2-size2;
                            target-=(target+index2-size2);
                        }
                    }
                }
            }
        }
        return 0.0000;
    };

    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int t=(nums1.size()+nums2.size())/2;
        if ((nums1.size()+nums2.size())%2==0) return (findIndex(nums1,nums2,t)+findIndex(nums1,nums2,(t+1)))/2;
        else return findIndex(nums1,nums2,(t+1));
        return 0.0000;
    }
};
